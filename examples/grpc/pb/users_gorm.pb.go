// Code generated by protoc-gen-gorm. DO NOT EDIT.
// versions:
// 	protoc-gen-gorm v0.0.0
// 	protoc          (unknown)
// source: users.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/complex64/protoc-gen-gorm/gormpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	time "time"
)

// UserModel is the GORM model for pb.User.
type UserModel struct {
	Name       string    `gorm:"not null;unique;primaryKey;index;<-:create"`
	CreateTime time.Time `gorm:"not null;autoCreateTime"`
	UpdateTime time.Time `gorm:"autoUpdateTime"`
	GivenName  string
	FamilyName string
	Email      string `gorm:"not null"`
}

// AsProto converts a UserModel to its protobuf representation.
func (m *UserModel) AsProto() (*User, error) {
	x := new(User)
	x.Name = m.Name
	if m.CreateTime != (time.Time{}) {
		x.CreateTime = timestamppb.New(m.CreateTime)
	}
	if m.UpdateTime != (time.Time{}) {
		x.UpdateTime = timestamppb.New(m.UpdateTime)
	}
	x.GivenName = m.GivenName
	x.FamilyName = m.FamilyName
	x.Email = m.Email
	return x, nil
}

// AsModel converts a User to its GORM model.
func (x *User) AsModel() (*UserModel, error) {
	m := new(UserModel)
	m.Name = x.Name
	if t := x.CreateTime; t != nil {
		m.CreateTime = t.AsTime()
	}
	if t := x.UpdateTime; t != nil {
		m.UpdateTime = t.AsTime()
	}
	m.GivenName = x.GivenName
	m.FamilyName = x.FamilyName
	m.Email = x.Email
	return m, nil
}

func (m *UserModel) TableName() string {
	return "users"
}

type UserGetOption func(tx *gorm.DB) *gorm.DB
type UserListOption func(tx *gorm.DB) *gorm.DB

type UserWithDB struct {
	x  *User
	db *gorm.DB
}

func (x *User) WithDB(db *gorm.DB) UserWithDB {
	return UserWithDB{x: x, db: db}
}

func (c UserWithDB) Create(ctx context.Context) (*User, error) {
	if c.x == nil {
		return nil, nil
	}
	m, err := c.x.AsModel()
	if err != nil {
		return nil, err
	}
	db := c.db.WithContext(ctx)
	if err := db.Create(m).Error; err != nil {
		return nil, err
	}
	if y, err := m.AsProto(); err != nil {
		return nil, err
	} else {
		return y, nil
	}
}

func (c UserWithDB) Get(ctx context.Context, opts ...UserGetOption) (*User, error) {
	if c.x == nil {
		return nil, nil
	}
	var zero string
	if c.x.Name == zero {
		return nil, fmt.Errorf("empty primary key")
	}
	m, err := c.x.AsModel()
	if err != nil {
		return nil, err
	}
	db := c.db.WithContext(ctx)
	for _, opt := range opts {
		db = opt(db)
	}
	out := UserModel{}
	if err := db.Where(m).First(&out).Error; err != nil {
		return nil, err
	}
	if y, err := out.AsProto(); err != nil {
		return nil, err
	} else {
		return y, nil
	}
}

func (c UserWithDB) List(ctx context.Context, opts ...UserListOption) ([]*User, error) {
	if c.x == nil {
		return nil, nil
	}
	db := c.db.WithContext(ctx)
	for _, opt := range opts {
		db = opt(db)
	}
	var ms []UserModel
	if err := db.Find(&ms).Error; err != nil {
		return nil, err
	}
	xs := make([]*User, 0, len(ms))
	for _, m := range ms {
		if x, err := m.AsProto(); err != nil {
			return nil, err
		} else {
			xs = append(xs, x)
		}
	}
	return xs, nil
}

func (c UserWithDB) Update(ctx context.Context) (*User, error) {
	if c.x == nil {
		return nil, nil
	}
	m, err := c.x.AsModel()
	if err != nil {
		return nil, err
	}
	db := c.db.WithContext(ctx)
	if err := db.Save(m).Error; err != nil {
		return nil, err
	}
	return c.Get(ctx)
}

func (c UserWithDB) Patch(ctx context.Context, mask *fieldmaskpb.FieldMask) error {
	if c.x == nil {
		return nil
	}
	if mask == nil {
		_, err := c.Update(ctx)
		return err
	}
	if !mask.IsValid(c.x) {
		return fmt.Errorf("invalid field mask")
	}
	paths := mask.Paths
	if len(paths) == 0 {
		_, err := c.Update(ctx)
		return err
	}
	var zero string
	if c.x.Name == zero {
		return fmt.Errorf("empty primary key")
	}
	m, err := c.x.AsModel()
	if err != nil {
		return err
	}
	target := UserModel{Name: m.Name}
	cols := LookupUserModelColumns(paths)
	db := c.db.WithContext(ctx)
	if err := db.Model(&target).Select(cols).Updates(m).Error; err != nil {
		return err
	}
	return nil
}

func (c UserWithDB) Delete(ctx context.Context) error {
	if c.x == nil {
		return nil
	}
	var zero string
	if c.x.Name == zero {
		return fmt.Errorf("empty primary key")
	}
	m, err := c.x.AsModel()
	if err != nil {
		return err
	}
	db := c.db.WithContext(ctx)
	if err := db.Where(m).Delete(&UserModel{}).Error; err != nil {
		return err
	}
	return nil
}

func WithUserGetFieldMask(mask *fieldmaskpb.FieldMask) UserGetOption {
	return func(tx *gorm.DB) *gorm.DB {
		cols := LookupUserModelColumns(mask.Paths)
		tx = tx.Select(cols)
		return tx
	}
}

func WithUserListFilter(filter string) UserListOption {
	return func(tx *gorm.DB) *gorm.DB {
		return tx
	}
}

func WithUserListLimit(n int) UserListOption {
	return func(tx *gorm.DB) *gorm.DB {
		return tx.Limit(n)
	}
}

func WithUserListFieldMask(mask *fieldmaskpb.FieldMask) UserListOption {
	return func(tx *gorm.DB) *gorm.DB {
		cols := LookupUserModelColumns(mask.Paths)
		tx = tx.Select(cols)
		return tx
	}
}

func WithUserListOffset(n int) UserListOption {
	return func(tx *gorm.DB) *gorm.DB {
		return tx.Offset(n)
	}
}

func WithUserListOrder(order string) UserListOption {
	return func(tx *gorm.DB) *gorm.DB {
		return tx.Order(order)
	}
}

var fieldColumnsUserModel = map[string]string{
	"name":        "Name",
	"create_time": "CreateTime",
	"update_time": "UpdateTime",
	"given_name":  "GivenName",
	"family_name": "FamilyName",
	"email":       "Email",
}

func LookupUserModelColumn(field string) string {
	if col, ok := fieldColumnsUserModel[field]; ok {
		return col
	} else {
		panic(field)
	}
}

func LookupUserModelColumns(paths []string) (cols []string) {
	for _, p := range paths {
		cols = append(cols, LookupUserModelColumn(p))
	}
	return
}
