{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 protoc-gen-gorm is a plugin for protoc , the Protocol Buffer (\"proto\") Compiler. The plugin generates GORM v2 models and supporting code, depending on the options you use. Install \u00b6 go install github.com/complex64/protoc-gen-gorm@latest TODO: Point to Usage for GHA/containerized Features \u00b6 Targets Gorm v2 ( gorm.io/gorm ) Generates GORM-compatible model struct types for your message types: UserModel for your User message Generates methods to convert from proto message to model: ToModel() on the proto message, and ToProto() on the model Generates CRUD helper methods : Create() , Get() , List() , Update() , Patch() , and Delete() Encode fields as JSON strings Usage \u00b6 TODO: protoc TODO: buf TODO: GHA About \u00b6 TODO: Repeat notes from README","title":"Introduction"},{"location":"#introduction","text":"protoc-gen-gorm is a plugin for protoc , the Protocol Buffer (\"proto\") Compiler. The plugin generates GORM v2 models and supporting code, depending on the options you use.","title":"Introduction"},{"location":"#install","text":"go install github.com/complex64/protoc-gen-gorm@latest TODO: Point to Usage for GHA/containerized","title":"Install"},{"location":"#features","text":"Targets Gorm v2 ( gorm.io/gorm ) Generates GORM-compatible model struct types for your message types: UserModel for your User message Generates methods to convert from proto message to model: ToModel() on the proto message, and ToProto() on the model Generates CRUD helper methods : Create() , Get() , List() , Update() , Patch() , and Delete() Encode fields as JSON strings","title":"Features"},{"location":"#usage","text":"TODO: protoc TODO: buf TODO: GHA","title":"Usage"},{"location":"#about","text":"TODO: Repeat notes from README","title":"About"},{"location":"automation/","text":"Automate with GitHub Actions and buf \u00b6 TODO : Tutorial on how to automate: Lint, validate, compile (with protoc-gen-gorm), and pull-request on change to your proto files.","title":"Automate with GitHub Actions and buf"},{"location":"automation/#automate-with-github-actions-and-buf","text":"TODO : Tutorial on how to automate: Lint, validate, compile (with protoc-gen-gorm), and pull-request on change to your proto files.","title":"Automate with GitHub Actions and buf"},{"location":"options/","text":"Options \u00b6 Options control what protoc-gen-gorm does. You set them in your .proto files, as regular Protocol Buffer Options . The plugin does nothing by default, you'll have to flag some of your messages to be models first, e.g. set model to true . File Options \u00b6 File options apply to all message types within the .proto file. model \u00b6 Sets model for all messages in the file. See model below . Default: false Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; option ( gorm.file ) . model = true ; validate \u00b6 Sets validate for all messages in the file. See validate below . Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; option ( gorm.file ) . validate = true ; crud \u00b6 Sets crud for all messages in the file. See crud below . Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; option ( gorm.file ) . crud = true ; Message Options \u00b6 Message options control generation of model and supporting code for your message types. model \u00b6 Marks a message as a model so protoc-gen-gorm generates a Go struct and converter methods for use with GORM v2. The struct type name is the message's name with \"Model\" appended. Default: false Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; } Generates: package mypackage type MyMessageModel struct { /* ... */ } func ( m * MyMessageModel ) AsProto () ( * MyMessage , error ) { /* ... */ } func ( x * MyMessage ) AsModel () ( * MyMessageModel , error ) { /* ... */ } validate \u00b6 TODO Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . validate = true ; } crud \u00b6 Generates supporting types and methods to implement CRUD for your model. Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . crud = true ; } Generates: package mypackage type MyMessageWithDB struct { /* ... */ } type CrudGetOption type CrudListOption // Attach a GORM DB handle to your message. func ( x * MyMessage ) WithDB ( db * gorm . DB ) MyMessageWithDB // CRUD support without need to convert to model type and back. func ( c MyMessageWithDB ) Create ( context . Context ) ( * MyMessage , error ) func ( c MyMessageWithDB ) Get ( context . Context , opts ... MyMessageGetOption ) ( * MyMessage , error ) func ( c MyMessageWithDB ) List ( context . Context , opts ... MyMessageListOption ) ([] * MyMessage , error ) func ( c MyMessageWithDB ) Update ( context . Context ) ( * MyMessage , error ) func ( c MyMessageWithDB ) Patch ( context . Context , mask * fieldmaskpb . FieldMask ) error func ( c MyMessageWithDB ) Delete ( context . Context ) error table \u00b6 Set the table name for models of this type. Default: Unset, uses the GORM default . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) = { model : true , table : \"mytable\" }; } The generated struct now implements GORM's Tabler interface : package mypackage type MyMessageModel struct { // ... } func ( m * MyMessageModel ) TableName () string { return \"mytable\" } Field Options \u00b6 Field options refine how your generated model works with GORM through struct field tags and supporting code. column \u00b6 Sets the database column name . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . column = \"my_column\" ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"column:my_column\"` } not_null \u00b6 Specifies the field's column as \"NOT NULL\". See \"not null\" under GORM: Field Tags . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . not_null = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"not null\"` } default \u00b6 Sets the default value for the field's column. See \"default\" under GORM: Field Tags . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . default = \"a default value\" ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"default:\\\"a default value\\\"\"` } unique \u00b6 Flags the field's column to be indexed with a unique index. See GORM: Indexes . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . unique = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"uniqueIndex\"` } primary_key \u00b6 Makes the field a primary key. Also see: GORM: ID as Primary Key GORM: Composite Primary Key Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string uuid = 1 [ ( gorm.field ) . primary_key = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { Uuid string `gorm:\"primaryKey\"` } index \u00b6 Adds an index to a field. Composite and multiple indexes are possible. default \u00b6 Use defaults for the index, e.g. name, type, etc. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . index = { default : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"index\"` } name \u00b6 Gives the index a custom name. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . index = { name : \"my_index_name\" } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"index:my_index_name\"` } unique_index \u00b6 Same as index above except that the index is unique. default \u00b6 Use defaults for the unique index, e.g. name, type, etc. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . unique_index = { default : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"uniqueIndex\"` } name \u00b6 Gives the unique index a custom name. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . unique_index = { name : \"my_index_name\" } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"uniqueIndex:my_index_name\"` } auto_create_time \u00b6 Instructs GORM to track creation time in the flagged field. Example: syntax = \"proto3\" ; import \"google/protobuf/timestamp.proto\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; google.protobuf.Timestamp my_time = 1 [ ( gorm.field ) . auto_create_time = true ]; } Equivalent GORM struct field tag: package mypackage import \"time\" type MyMessageModel struct { MyTime time . Time `gorm:\"autoCreateTime\"` } auto_update_time \u00b6 Instructs GORM to track update time in the flagged field. Example: syntax = \"proto3\" ; import \"google/protobuf/timestamp.proto\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; google.protobuf.Timestamp my_time = 1 [ ( gorm.field ) . auto_update_time = true ]; } Equivalent GORM struct field tag: package mypackage import \"time\" type MyMessageModel struct { MyTime time . Time `gorm:\"autoUpdateTime\"` } permissions \u00b6 Sets the field level permissions to turn columns into read-only, write-only, create-only, update-only or to ignore a column entirely. ignore \u00b6 Ignores the column entirely. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_ignored_field = 1 [ ( gorm.field ) . ignore = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"-\"` } deny \u00b6 Restricts access to a field. Multiple \"denys\" can be combined to the desired effect. create \u00b6 Prevent creation, still allows reads and updates. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . deny = { create : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"<-:update\"` } update \u00b6 Prevent updates, still allows creation and reads. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . deny = { update : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"<-:create\"` } read \u00b6 Prevent reads, still allows writes. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . deny = { read : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"->:false;<-\"` } json \u00b6 Encode and decode the field as JSON strings. The converter methods, MyMessageModel.AsProto() and MyMessage.AsModel() in this case, call json.Unmarshal and json.Marshal respectively to decode the field's contents. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; map < string , string > my_map = 1 [ ( gorm.field ) . json = true ]; }","title":"Options"},{"location":"options/#options","text":"Options control what protoc-gen-gorm does. You set them in your .proto files, as regular Protocol Buffer Options . The plugin does nothing by default, you'll have to flag some of your messages to be models first, e.g. set model to true .","title":"Options"},{"location":"options/#file-options","text":"File options apply to all message types within the .proto file.","title":"File Options"},{"location":"options/#model","text":"Sets model for all messages in the file. See model below . Default: false Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; option ( gorm.file ) . model = true ;","title":"model"},{"location":"options/#validate","text":"Sets validate for all messages in the file. See validate below . Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; option ( gorm.file ) . validate = true ;","title":"validate"},{"location":"options/#crud","text":"Sets crud for all messages in the file. See crud below . Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; option ( gorm.file ) . crud = true ;","title":"crud"},{"location":"options/#message-options","text":"Message options control generation of model and supporting code for your message types.","title":"Message Options"},{"location":"options/#model_1","text":"Marks a message as a model so protoc-gen-gorm generates a Go struct and converter methods for use with GORM v2. The struct type name is the message's name with \"Model\" appended. Default: false Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; } Generates: package mypackage type MyMessageModel struct { /* ... */ } func ( m * MyMessageModel ) AsProto () ( * MyMessage , error ) { /* ... */ } func ( x * MyMessage ) AsModel () ( * MyMessageModel , error ) { /* ... */ }","title":"model"},{"location":"options/#validate_1","text":"TODO Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . validate = true ; }","title":"validate"},{"location":"options/#crud_1","text":"Generates supporting types and methods to implement CRUD for your model. Default: false Implies model = true when set to true . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . crud = true ; } Generates: package mypackage type MyMessageWithDB struct { /* ... */ } type CrudGetOption type CrudListOption // Attach a GORM DB handle to your message. func ( x * MyMessage ) WithDB ( db * gorm . DB ) MyMessageWithDB // CRUD support without need to convert to model type and back. func ( c MyMessageWithDB ) Create ( context . Context ) ( * MyMessage , error ) func ( c MyMessageWithDB ) Get ( context . Context , opts ... MyMessageGetOption ) ( * MyMessage , error ) func ( c MyMessageWithDB ) List ( context . Context , opts ... MyMessageListOption ) ([] * MyMessage , error ) func ( c MyMessageWithDB ) Update ( context . Context ) ( * MyMessage , error ) func ( c MyMessageWithDB ) Patch ( context . Context , mask * fieldmaskpb . FieldMask ) error func ( c MyMessageWithDB ) Delete ( context . Context ) error","title":"crud"},{"location":"options/#table","text":"Set the table name for models of this type. Default: Unset, uses the GORM default . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) = { model : true , table : \"mytable\" }; } The generated struct now implements GORM's Tabler interface : package mypackage type MyMessageModel struct { // ... } func ( m * MyMessageModel ) TableName () string { return \"mytable\" }","title":"table"},{"location":"options/#field-options","text":"Field options refine how your generated model works with GORM through struct field tags and supporting code.","title":"Field Options"},{"location":"options/#column","text":"Sets the database column name . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . column = \"my_column\" ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"column:my_column\"` }","title":"column"},{"location":"options/#not_null","text":"Specifies the field's column as \"NOT NULL\". See \"not null\" under GORM: Field Tags . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . not_null = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"not null\"` }","title":"not_null"},{"location":"options/#default","text":"Sets the default value for the field's column. See \"default\" under GORM: Field Tags . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . default = \"a default value\" ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"default:\\\"a default value\\\"\"` }","title":"default"},{"location":"options/#unique","text":"Flags the field's column to be indexed with a unique index. See GORM: Indexes . Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . unique = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"uniqueIndex\"` }","title":"unique"},{"location":"options/#primary_key","text":"Makes the field a primary key. Also see: GORM: ID as Primary Key GORM: Composite Primary Key Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string uuid = 1 [ ( gorm.field ) . primary_key = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { Uuid string `gorm:\"primaryKey\"` }","title":"primary_key"},{"location":"options/#index","text":"Adds an index to a field. Composite and multiple indexes are possible.","title":"index"},{"location":"options/#default_1","text":"Use defaults for the index, e.g. name, type, etc. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . index = { default : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"index\"` }","title":"default"},{"location":"options/#name","text":"Gives the index a custom name. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . index = { name : \"my_index_name\" } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"index:my_index_name\"` }","title":"name"},{"location":"options/#unique_index","text":"Same as index above except that the index is unique.","title":"unique_index"},{"location":"options/#default_2","text":"Use defaults for the unique index, e.g. name, type, etc. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . unique_index = { default : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"uniqueIndex\"` }","title":"default"},{"location":"options/#name_1","text":"Gives the unique index a custom name. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . unique_index = { name : \"my_index_name\" } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"uniqueIndex:my_index_name\"` }","title":"name"},{"location":"options/#auto_create_time","text":"Instructs GORM to track creation time in the flagged field. Example: syntax = \"proto3\" ; import \"google/protobuf/timestamp.proto\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; google.protobuf.Timestamp my_time = 1 [ ( gorm.field ) . auto_create_time = true ]; } Equivalent GORM struct field tag: package mypackage import \"time\" type MyMessageModel struct { MyTime time . Time `gorm:\"autoCreateTime\"` }","title":"auto_create_time"},{"location":"options/#auto_update_time","text":"Instructs GORM to track update time in the flagged field. Example: syntax = \"proto3\" ; import \"google/protobuf/timestamp.proto\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; google.protobuf.Timestamp my_time = 1 [ ( gorm.field ) . auto_update_time = true ]; } Equivalent GORM struct field tag: package mypackage import \"time\" type MyMessageModel struct { MyTime time . Time `gorm:\"autoUpdateTime\"` }","title":"auto_update_time"},{"location":"options/#permissions","text":"Sets the field level permissions to turn columns into read-only, write-only, create-only, update-only or to ignore a column entirely.","title":"permissions"},{"location":"options/#ignore","text":"Ignores the column entirely. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_ignored_field = 1 [ ( gorm.field ) . ignore = true ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"-\"` }","title":"ignore"},{"location":"options/#deny","text":"Restricts access to a field. Multiple \"denys\" can be combined to the desired effect.","title":"deny"},{"location":"options/#create","text":"Prevent creation, still allows reads and updates. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . deny = { create : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"<-:update\"` }","title":"create"},{"location":"options/#update","text":"Prevent updates, still allows creation and reads. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . deny = { update : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"<-:create\"` }","title":"update"},{"location":"options/#read","text":"Prevent reads, still allows writes. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; string my_field = 1 [ ( gorm.field ) . deny = { read : true } ]; } Equivalent GORM struct field tag: package mypackage type MyMessageModel struct { MyField string `gorm:\"->:false;<-\"` }","title":"read"},{"location":"options/#json","text":"Encode and decode the field as JSON strings. The converter methods, MyMessageModel.AsProto() and MyMessage.AsModel() in this case, call json.Unmarshal and json.Marshal respectively to decode the field's contents. Example: syntax = \"proto3\" ; import \"gorm/options.proto\" ; package mypackage ; message MyMessage { option ( gorm.message ) . model = true ; map < string , string > my_map = 1 [ ( gorm.field ) . json = true ]; }","title":"json"}]}